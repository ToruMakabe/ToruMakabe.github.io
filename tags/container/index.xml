<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Container on re-imagine</title>
    <link>https://ToruMakabe.github.io/tags/container/</link>
    <description>Recent content in Container on re-imagine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; Copyright 2019 Toru Makabe</copyright>
    <lastBuildDate>Mon, 08 Nov 2021 19:30:00 +0900</lastBuildDate><atom:link href="https://ToruMakabe.github.io/tags/container/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Azure Container Appsを試す前に知っておきたいこと - Ingress編</title>
      <link>https://ToruMakabe.github.io/post/az-containerapps-ingress-things-to-know/</link>
      <pubDate>Mon, 08 Nov 2021 19:30:00 +0900</pubDate>
      
      <guid>https://ToruMakabe.github.io/post/az-containerapps-ingress-things-to-know/</guid>
      <description>何の話か Ignite 2021秋でAzure Container Appsが発表されました。Kubernetesを基盤に、Envoy、KEDA、DaprといったCNCFプロジェクトの成果物をマネージドサービスとして提供するサービスです。ここ数年、マイクロソフトがCNCFで取り組んできたことをまとめてドン、という感じで、なかなか熱いものがあります。
ですが、プレビュー初期ということもあり、公式ドキュメントが充実しているとは言いにくい状況です。そこで、ドキュメントが整備されるまで、試す前に知っておくといいかな、ということをいくつか紹介します。
なお、プレビュー中ということもあり、これから説明する内容には変更される可能性があります。公式ドキュメントを正としてください。また、選定や設計するにあたって足りない情報があれば、どしどし要求しましょう。公式ドキュメント(英語)の各ページ下部にGitHub Issuesへのリンクがあります。
今回はIngress編です。
Azure Container Apps Ingressとは EnvoyをベースとしたProxyです。
 Azure Container Apps プレビューでの HTTPS イングレスの設定
 Ingressはユーザの作成したContainer Appsアプリケーションに対し、Container Apps環境内外からアクセスできるよう、エンドポイントを提供します。TLS終端はもちろん、複数リビジョンへのトラフィックスプリットもできます。Container Appsの使いこなしのカギのひとつです。
以下の3つは、わたしが初見の際に持った疑問です。みなさんも、知っておく価値はあると思います。
 gRPC使える？ 名前解決やサービスディスカバリってどうなってる？ 同じ環境内のIngress経由トラフィックをプライベートネットワークに閉じ込められる？  gRPC使える？ 使えます。
では試してみましょう。grpc/grpc-go のhelloworldサンプルをベースに、負荷分散が効くか確認するため、応答メッセージにホスト名を加えたサーバアプリを作ります。また、gRPCリフレクションも設定します。
package main import ( &amp;#34;context&amp;#34; &amp;#34;flag&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net&amp;#34; &amp;#34;os&amp;#34; &amp;#34;google.golang.org/grpc&amp;#34; pb &amp;#34;google.golang.org/grpc/examples/helloworld/helloworld&amp;#34; &amp;#34;google.golang.org/grpc/reflection&amp;#34; ) var ( port = flag.Int(&amp;#34;port&amp;#34;, 50051, &amp;#34;The server port&amp;#34;) ) type server struct { pb.UnimplementedGreeterServer } func (s *server) SayHello(ctx context.</description>
    </item>
    
    <item>
      <title>Azure Container Registry TasksでAqua MicroScannerを自動実行する</title>
      <link>https://ToruMakabe.github.io/post/aqua_acr/</link>
      <pubDate>Fri, 09 Aug 2019 13:00:00 +0900</pubDate>
      
      <guid>https://ToruMakabe.github.io/post/aqua_acr/</guid>
      <description>何の話か コンテナーイメージに脆弱性のあるパッケージが含まれないかチェックしてくれるAqua MicroScannerですが、Azure Container Registry(ACR)のACR Tasks ビルド時でも実行できるとうれしいですよね。その手順をまとめます。
@ehotinger のブログを読み、このアイデアはもっと知られてもいいなぁと思ったのが書いたきっかけです。Thanks Eric!
Aqua MicroScannerとは Aqua Security社はコンテナー関連の包括的な製品を提供していますが、MicroScannerはコンテナーイメージ含まれるパッケージの脆弱性スキャンに特化したソフトウェアで、無償で利用できます。もちろん有償版のほうが機能豊富で幅広い脅威に対応できるのですが、パッケージの脆弱性スキャンで十分という場合には、感謝してMicroScannerを使わせていただきましょう。無償/有償の機能差はこちらを。
MicroScannerのコンセプトは、以下のリンク先にある記事やスライドがわかりやすいです。
 Aqua’s MicroScanner: Free Image Vulnerability Scanner for Developers
  What&amp;rsquo;s so hard about vulnerability scanning?
  Aqua MicroScanner - A free-to-use tool that scans container images for package vulnerabilities - GitHub
 トークンの取得 MicroScannerの実行にはトークンが要ります。以下の手順で、指定したメールアドレスに送られてきます。メールを確認し、控えておきましょう。
$ docker run --rm -it aquasec/microscanner --register &amp;lt;email address&amp;gt; コンテナービルド時に実行してみる 以降、ここにサンプルを置いておきましたので、このfork、cloneを前提に話をすすめます。
ACRでの自動実行の前に、MicroScannerをどう使うか、どんな動きをするのかを見ておきましょう。
まずはじめに、こんなコンテナーイメージを作ります。ファイルはallin.Dockerfileです。
FROM alpine:3.3 RUN apk add --no-cache ca-certificates ADD https://get.</description>
    </item>
    
  </channel>
</rss>
