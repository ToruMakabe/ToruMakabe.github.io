<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vmss on re-imagine</title>
    <link>https://ToruMakabe.github.io/tags/vmss/</link>
    <description>Recent content in Vmss on re-imagine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 26 Mar 2018 00:08:30 +0900</lastBuildDate>
    
	<atom:link href="https://ToruMakabe.github.io/tags/vmss/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AzureのAvailability Zonesへ分散するVMSSをTerraformで作る</title>
      <link>https://ToruMakabe.github.io/post/az_vmss_terraform/</link>
      <pubDate>Mon, 26 Mar 2018 00:08:30 +0900</pubDate>
      
      <guid>https://ToruMakabe.github.io/post/az_vmss_terraform/</guid>
      <description>動機 Terraform Azure Provider 1.3.0で、VMSSを作る際にAvailability Zonesを指定できるようになりました。Availability Zonesはインフラの根っこの仕組みなので、現在(2018&amp;frasl;3)限定されたリージョンで長めのプレビュー期間がとられています。ですが、GAやグローバル展開を見据え、素振りしておきましょう。
前提条件  Availability Zones対応リージョンを選びます。現在は5リージョンです。この記事ではEast US 2とします。 Availability Zonesのプレビューにサインアップ済みとします。 bashでsshの公開鍵が~/.ssh/id_rsa.pubにあると想定します。 動作確認した環境は以下です。  Terraform 0.11.2 Terraform Azure Provider 1.3.0 WSL (ubuntu 16.04) macos (High Sierra 10.13.3)   コード 以下のファイルを同じディレクトリに作成します。
Terraform メインコード VMSSと周辺リソースを作ります。
 最終行近くの &amp;ldquo;zones = [1, 2, 3]&amp;rdquo; がポイントです。これだけで、インスタンスを散らす先のゾーンを指定できます。 クロスゾーン負荷分散、冗長化するため、Load BalancerとパブリックIPのSKUをStandardにします。  [main.tf]
resource &amp;quot;azurerm_resource_group&amp;quot; &amp;quot;poc&amp;quot; { name = &amp;quot;${var.resource_group_name}&amp;quot; location = &amp;quot;East US 2&amp;quot; } resource &amp;quot;azurerm_virtual_network&amp;quot; &amp;quot;poc&amp;quot; { name = &amp;quot;vnet01&amp;quot; resource_group_name = &amp;quot;${azurerm_resource_group.</description>
    </item>
    
  </channel>
</rss>