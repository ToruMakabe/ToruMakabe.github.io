<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Batch on re-imagine</title>
    <link>http://torumakabe.github.io/tags/batch/</link>
    <description>Recent content in Batch on re-imagine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 29 Apr 2016 17:00:00 +0900</lastBuildDate>
    <atom:link href="http://torumakabe.github.io/tags/batch/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Azure BatchとDockerで管理サーバレスバッチ環境を作る</title>
      <link>http://torumakabe.github.io/post/azure_batch_docker/</link>
      <pubDate>Fri, 29 Apr 2016 17:00:00 +0900</pubDate>
      
      <guid>http://torumakabe.github.io/post/azure_batch_docker/</guid>
      <description>

&lt;h2 id=&#34;サーバレスって言いたいだけじゃないです:1e958ca6820e4dcff939a22a84382ed3&#34;&gt;サーバレスって言いたいだけじゃないです&lt;/h2&gt;

&lt;p&gt;Linux向けAzure BatchのPreviewが&lt;a href=&#34;https://azure.microsoft.com/ja-jp/blog/announcing-support-of-linux-vm-on-azure-batch-service/&#34;&gt;はじまり&lt;/a&gt;ました。地味ですが、なかなかのポテンシャルです。&lt;/p&gt;

&lt;p&gt;クラウドでバッチを走らせる時にチャレンジしたいことの筆頭は「ジョブを走らせる時だけサーバ使う。待機時間は消しておいて、
節約」でしょう。&lt;/p&gt;

&lt;p&gt;ですが、仕組み作りが意外に面倒なんですよね。管理サーバを作って、ジョブ管理ソフト入れて、Azure SDK/CLI入れて。クレデンシャルを安全に管理して。可用性確保して。バックアップして。で、管理サーバは消せずに常時起動。なんか中途半端です。&lt;/p&gt;

&lt;p&gt;その課題、Azure Batchを使って解決しましょう。レッツ管理サーバレスバッチ処理。&lt;/p&gt;

&lt;h2 id=&#34;コンセプト:1e958ca6820e4dcff939a22a84382ed3&#34;&gt;コンセプト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;管理サーバを作らない&lt;/li&gt;
&lt;li&gt;Azure Batchコマンドでジョブを投入したら、あとはスケジュール通りに定期実行される&lt;/li&gt;
&lt;li&gt;ジョブ実行サーバ群(Pool)は必要な時に作成され、処理が終わったら削除される&lt;/li&gt;
&lt;li&gt;サーバの迅速な作成とアプリ可搬性担保のため、dockerを使う&lt;/li&gt;
&lt;li&gt;セットアップスクリプト、タスク実行ファイル、アプリ向け入力/出力ファイルはオブジェクトストレージに格納&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;サンプル:1e958ca6820e4dcff939a22a84382ed3&#34;&gt;サンプル&lt;/h2&gt;

&lt;p&gt;Githubにソースを&lt;a href=&#34;https://github.com/ToruMakabe/Azure_Batch_Sample&#34;&gt;置いておきます&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;バッチアカウントとストレージアカウント-コンテナの作成とアプリ-データの配置:1e958ca6820e4dcff939a22a84382ed3&#34;&gt;バッチアカウントとストレージアカウント、コンテナの作成とアプリ、データの配置&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://azure.microsoft.com/ja-jp/documentation/articles/batch-technical-overview/&#34;&gt;公式ドキュメント&lt;/a&gt;で概要を確認しましょう。うっすら理解できたら、バッチアカウントとストレージアカウントを作成します。&lt;/p&gt;

&lt;p&gt;ストレージアカウントに、Blobコンテナを作ります。サンプルの構成は以下の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── blob
│   ├── application
│   │   ├── starttask.sh
│   │   └── task.sh
│   ├── input
│   │   └── the_star_spangled_banner.txt
│   └── output
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;applicationコンテナに、ジョブ実行サーバ作成時のスクリプト(starttask.sh)と、タスク実行時のスクリプト(task.sh)を配置します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ToruMakabe/Azure_Batch_Sample/blob/master/blob/application/starttask.sh&#34;&gt;starttask.sh&lt;/a&gt; - docker engineをインストールします&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ToruMakabe/Azure_Batch_Sample/blob/master/blob/application/task.sh&#34;&gt;task.sh&lt;/a&gt; - docker hubからサンプルアプリが入ったコンテナを持ってきて実行します。&lt;a href=&#34;https://github.com/ToruMakabe/Azure_Batch_Sample/tree/master/docker&#34;&gt;サンプル&lt;/a&gt;はPythonで書いたシンプルなWord Countアプリです&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、アプリにデータをわたすinputコンテナと、実行結果を書き込むoutputコンテナも作ります。サンプルのinputデータはアメリカ国歌です。&lt;/p&gt;

&lt;p&gt;コンテナ、ファイルには、適宜SASを生成しておいてください。inputではreadとlist、outputでは加えてwrite権限を。&lt;/p&gt;

&lt;p&gt;さて、いよいよジョブをJSONで定義します。詳細は&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/azure/dn820158.aspx?f=255&amp;amp;MSPPError=-2147217396&#34;&gt;公式ドキュメント&lt;/a&gt;を確認してください。ポイントだけまとめます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2016/04/29 05:30(UTC)から開始する - schedule/doNotRunUntil&lt;/li&gt;
&lt;li&gt;4時間ごとに実行する - schedule/recurrenceInterval&lt;/li&gt;
&lt;li&gt;ジョブ実行後にサーバプールを削除する - jobSpecification/poolInfo/autoPoolSpecification/poolLifetimeOption&lt;/li&gt;
&lt;li&gt;ジョブ実行時にtask.shを呼び出す  - jobSpecification/jobManagerTask/commandLine&lt;/li&gt;
&lt;li&gt;サーバはUbuntu 14.04とする - jobSpecification/poolInfo/autoPoolSpecification/virtualMachineConfiguration&lt;/li&gt;
&lt;li&gt;サーバ数は1台とする - jobSpecification/poolInfo/autoPoolSpecification/pool/targetDedicated&lt;/li&gt;
&lt;li&gt;サーバプール作成時にstarttask.shを呼び出す - jobSpecification/poolInfo/autoPoolSpecification/pool/startTask&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {
  &amp;quot;odata.metadata&amp;quot;:&amp;quot;https://myaccount.myregion.batch.azure.com/$metadata#jobschedules/@Element&amp;quot;,
  &amp;quot;id&amp;quot;:&amp;quot;myjobschedule1&amp;quot;,
  &amp;quot;schedule&amp;quot;: {
    &amp;quot;doNotRunUntil&amp;quot;:&amp;quot;2016-04-29T05:30:00.000Z&amp;quot;,
    &amp;quot;recurrenceInterval&amp;quot;:&amp;quot;PT4H&amp;quot;
  },
  &amp;quot;jobSpecification&amp;quot;: {
    &amp;quot;priority&amp;quot;:100,
    &amp;quot;constraints&amp;quot;: {
      &amp;quot;maxWallClockTime&amp;quot;:&amp;quot;PT1H&amp;quot;,
      &amp;quot;maxTaskRetryCount&amp;quot;:-1
    },
    &amp;quot;jobManagerTask&amp;quot;: {
      &amp;quot;id&amp;quot;:&amp;quot;mytask1&amp;quot;,
      &amp;quot;commandLine&amp;quot;:&amp;quot;/bin/bash -c &#39;export LC_ALL=en_US.UTF-8; ./task.sh&#39;&amp;quot;,
      &amp;quot;resourceFiles&amp;quot;: [ {
        &amp;quot;blobSource&amp;quot;:&amp;quot;yourbloburi&amp;amp;sas&amp;quot;,
        &amp;quot;filePath&amp;quot;:&amp;quot;task.sh&amp;quot;
      }], 
      &amp;quot;environmentSettings&amp;quot;: [ {
        &amp;quot;name&amp;quot;:&amp;quot;VAR1&amp;quot;,
        &amp;quot;value&amp;quot;:&amp;quot;hello&amp;quot;
      } ],
      &amp;quot;constraints&amp;quot;: {
        &amp;quot;maxWallClockTime&amp;quot;:&amp;quot;PT1H&amp;quot;,
        &amp;quot;maxTaskRetryCount&amp;quot;:0,
        &amp;quot;retentionTime&amp;quot;:&amp;quot;PT1H&amp;quot;
      },
      &amp;quot;killJobOnCompletion&amp;quot;:false,
      &amp;quot;runElevated&amp;quot;:true,
      &amp;quot;runExclusive&amp;quot;:true
      },
      &amp;quot;poolInfo&amp;quot;: {
        &amp;quot;autoPoolSpecification&amp;quot;: {
          &amp;quot;autoPoolIdPrefix&amp;quot;:&amp;quot;mypool&amp;quot;,
          &amp;quot;poolLifetimeOption&amp;quot;:&amp;quot;job&amp;quot;,
          &amp;quot;pool&amp;quot;: {
            &amp;quot;vmSize&amp;quot;:&amp;quot;STANDARD_D1&amp;quot;,
            &amp;quot;virtualMachineConfiguration&amp;quot;: {
              &amp;quot;imageReference&amp;quot;: {
                &amp;quot;publisher&amp;quot;:&amp;quot;Canonical&amp;quot;,
                &amp;quot;offer&amp;quot;:&amp;quot;UbuntuServer&amp;quot;,
                &amp;quot;sku&amp;quot;:&amp;quot;14.04.4-LTS&amp;quot;,
                &amp;quot;version&amp;quot;:&amp;quot;latest&amp;quot;
              },
              &amp;quot;nodeAgentSKUId&amp;quot;:&amp;quot;batch.node.ubuntu 14.04&amp;quot;
            },
            &amp;quot;resizeTimeout&amp;quot;:&amp;quot;PT15M&amp;quot;,
            &amp;quot;targetDedicated&amp;quot;:1,
            &amp;quot;maxTasksPerNode&amp;quot;:1,
            &amp;quot;taskSchedulingPolicy&amp;quot;: {
              &amp;quot;nodeFillType&amp;quot;:&amp;quot;Spread&amp;quot;
            },
            &amp;quot;enableAutoScale&amp;quot;:false,
            &amp;quot;enableInterNodeCommunication&amp;quot;:false,
            &amp;quot;startTask&amp;quot;: {
              &amp;quot;commandLine&amp;quot;:&amp;quot;/bin/bash -c &#39;export LC_ALL=en_US.UTF-8; ./starttask.sh&#39;&amp;quot;,
              &amp;quot;resourceFiles&amp;quot;: [ {
                &amp;quot;blobSource&amp;quot;:&amp;quot;yourbloburi&amp;amp;sas&amp;quot;,
                &amp;quot;filePath&amp;quot;:&amp;quot;starttask.sh&amp;quot;
              } ],
              &amp;quot;environmentSettings&amp;quot;: [ {
                &amp;quot;name&amp;quot;:&amp;quot;VAR2&amp;quot;,
                &amp;quot;value&amp;quot;:&amp;quot;Chao&amp;quot;
              } ],
              &amp;quot;runElevated&amp;quot;:true,
              &amp;quot;waitForSuccess&amp;quot;:true
            },
            &amp;quot;metadata&amp;quot;: [ {
              &amp;quot;name&amp;quot;:&amp;quot;myproperty&amp;quot;,
              &amp;quot;value&amp;quot;:&amp;quot;myvalue&amp;quot;
            } ]
          }
        }
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そろそろ人類はJSONに変わるやり口を発明すべきですが、XMLよりはいいですね。&lt;/p&gt;

&lt;p&gt;それはさておき、面白そうなパラメータたち。並列バッチやジョブリリース時のタスクなど、今回使っていないものもまだまだあります。応用版はまたの機会に。&lt;/p&gt;

&lt;p&gt;ではスケジュールジョブをAzure BatchにCLIで送り込みます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;azure batch job-schedule create -f ./create_jobsched.json -u https://yourendpoint.location.batch.azure.com -a yourbatchaccount -k yourbatchaccountkey
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上です。あとはAzureにお任せです。4時間に1回、アメリカ国歌の単語を数える刺身タンポポなジョブですが、コツコツいきましょう。&lt;/p&gt;

&lt;h2 id=&#34;azure-automationとの使い分け:1e958ca6820e4dcff939a22a84382ed3&#34;&gt;Azure Automationとの使い分け&lt;/h2&gt;

&lt;p&gt;Azure Automationを使っても、ジョブの定期実行はできます。大きな違いは、PowerShellの要否と並列実行フレームワークの有無です。Azure AutomationはPowerShell前提ですが、Azure BatchはPowerShellに馴染みのない人でも使うことができます。また、今回は触れませんでしたが、Azure Batchは並列バッチ、オートスケールなど、バッチ処理に特化した機能を提供していることが特長です。うまく使い分けましょう。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>